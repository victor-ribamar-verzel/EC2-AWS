name: EC2 + S3

on:
  workflow_dispatch:
    inputs:
      instance_name:
        description: 'Nome da sua instancia EC2'
        required: true
      region:
        description: 'Regiao da AWS'
        required: true
      image:
        description: 'Imagem base da sua Instancia'
        required: true
      instance_type:
        description: 'Shape da maquina'
        required: true
      bucket_name:
        description: 'Nome do seu Bucket'
        required: true
      action:
        description: 'Action to perform (apply/destroy)'
        required: true

jobs:
  apply-instance:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}
    - name: Terraform Init
      run: terraform init
      working-directory: ec2
    - name: Terraform Format
      run: terraform fmt
      working-directory: ec2
    - name: Terraform Validate
      run: terraform validate
      working-directory: ec2
    - name: Terraform Apply
      run: terraform apply -var instance_name=${{ github.event.inputs.instance_name }} -var region=${{ github.event.inputs.region }} -var image=${{ github.event.inputs.image}} -var instance_type=${{ github.event.inputs.instance_type}} -auto-approve
      working-directory: ec2

  apply-bucket:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'apply' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}
    - name: Terraform Init
      run: terraform init
      working-directory: s3
    - name: Terraform Format
      run: terraform fmt
      working-directory: s3
    - name: Terraform Validate
      run: terraform validate
      working-directory: s3
    - name: Terraform Apply
      run: terraform apply -var bucket_name=${{ github.event.inputs.bucket_name }} -var region=${{ github.event.inputs.region }}  -auto-approve
      working-directory: s3

  destroy:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.action == 'destroy' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ github.event.inputs.region }}
    - name: Terraform Init
      run: terraform init
      working-directory: ec2
    - name: Terraform FMT
      run: terraform fmt
      working-directory: ec2
    - name: Terraform Validate
      run: terraform validate
      working-directory: ec2
    - name: Terraform Destroy
      run: terraform destroy -var instance_name=${{ github.event.inputs.instanceName }} -var region=${{ github.event.inputs.region }} -var image=${{ github.event.inputs.image}} -var instace_type=${{ github.event.inputs.instance_type}} -auto-approve
      working-directory: ec2